<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.heitian.ssm.dao.OrderDao">
    <resultMap id="OrderMap" type="com.heitian.ssm.model.Order">
        <id column="id" property="id" />
        <result column="customer_id" property="customerId" />
        <result column="owner_id" property="ownerId" />
        <result column="express_id" property="expressId" />
        <result column="commission_rate" property="commissionRate" />
        <result column="process_status" property="processStatus" />
        <result column="created_at" property="createdAt" />
        <result column="address_id" property="addressId" />
    </resultMap>

    <resultMap id="OrderBoMap" type="com.heitian.ssm.bo.OrderBo">
        <id column="id" property="id" />
        <result column="express_id" property="expressId" />
        <result column="order_status" property="status" />
        <result column="process_status" property="processStatus" />
        <result column="created_at" property="createdAt" />
        <result column="customer_name" property="customerName" />
        <result column="express_price" property="expressPrice" />
    </resultMap>

    <sql id="selectOrder">
        select `order`.id,
          owner.email ownerEmail,
          shop.name shopName,
          customer.email customerEmail,
          express_id,
          express_price,
          price,
          amount,
          commission,
          `order`.status order_status,
          process_status,
          created_at,
          customer_address.name customer_name,
          customer_address.telephone,
          address
    </sql>

    <sql id="fromOrder">
        from `order`
          join owner on `order`.owner_id=owner.id
          join shop on `order`.shop_id=shop.id
          join customer on `order`.customer_id=customer.id
          join customer_address on `order`.address_id = customer_address.id
    </sql>

    <sql id="whereTime">
        <where>
            <choose>
                <when test="time.id == 0">
                    AND #{time.year} = year(created_at) AND #{time.month} = month(created_at) AND #{time.day} = day(created_at)
                </when>
                <when test="time.id == 1">
                    AND #{time.year} = year(created_at) AND #{time.week} = week(created_at)
                </when>
                <when test="time.id == 2">
                    AND #{time.year} = year(created_at) AND #{time.month} = month(created_at)
                </when>
                <when test="time.id == 3">
                    AND #{time.year} = year(created_at)
                </when>
            </choose>
        </where>
    </sql>

    <!-- ____________________________________________ Luxuriant Splitter______________________________________  -->
    <select id="getOrderById" parameterType="java.lang.Long" resultMap="OrderBoMap">
        <include refid="selectOrder"/>
        <include refid="fromOrder"/>
        WHERE `order`.id=#{orderId}
    </select>


    <select id="getOwnerOrderBoByProcessStatus" resultMap="OrderBoMap">
        <include refid="selectOrder"/>
        <include refid="fromOrder"/>
        WHERE process_status=#{processStatus} AND `order`.owner_id=#{ownerId} limit #{start}, #{pageNum}
    </select>

    <select id="getOwnerOrderBoByProcessStatusNum" resultType="_int">
        SELECT count(*)
        FROM `order`
        WHERE process_status=#{processStatus} AND owner_id=#{ownerId}
    </select>

    <update id="changeOrderProcessStatus" >
        UPDATE `order` set process_status=#{status}
        WHERE id=#{orderId}
    </update>
    <!-- ____________________________________________ End of Luxuriant Splitter______________________________  -->


    <!--天周月年查询店主所有已完成的订单-->
    <select id="getOwnerOrders" parameterType="map" resultMap="OrderBoMap">
      <include refid="selectOrder" />
      <include refid="fromOrder" />
      <include refid="whereTime" />
      AND `order`.owner_id=#{id} AND `order`.process_status=4 AND `order`.status=1
      order by `order`.created_at desc
      limit #{time.start},#{time.count}
    </select>



    <!--店主所有已完成的订单数量，用于天周月年查询分页-->
    <select id="getOwnOrderCompleteNum" parameterType="map" resultType="int">
        select count(*)
        <include refid="fromOrder" />
        <include refid="whereTime" />
        AND `order`.owner_id=#{id} and `order`.process_status=4 and `order`.status=1
    </select>

    <update id="setExpress">
        update `order`,express_order_log
        set
        `order`.express_id = #{expressId},
        `order`.processStatus = 3,
        express_order_log.express_id=#{expressId},
        express_order_log.log=#{number}
        where express_order_log.order_id = `order`.id  AND express_order_log.order_id=#{orderId}
    </update>
    
    <!-- _______________________customer order__________________________________ -->
    
    <insert id="insertOrder" useGeneratedKeys="true" parameterType="com.heitian.ssm.model.Order">
        insert into `order`(customer_id,shop_id,owner_id,express_id,price,amount,commission,
        commission_rate,status,process_status,created_at,address_id) VALUES
          (#{order.customerId},#{order.shopId},#{order.ownerId},#{order.expressId},#{order.price},#{order.amount},#{order.commission},
          #{order.commissionRate}, #{order.status}, #{order.processStatus}, #{order.createdAt}, #{order.addressId})
    </insert>
    
    <select id="getOrderByCreatedAt" parameterType="com.heitian.ssm.model.Order" resultType="java.util.Date">
        select * from `order` where created_at = #{createdAt}        
    </select>
    
    <select id="getMaxOrderId" resultType="int">
        select max(id) from `order`        
    </select>
    
    <update id="changeOrderStatus" >
        UPDATE `order` set status=#{status}
        WHERE id=#{orderId}
    </update>
    
    <select id="search" parameterType="map" resultMap="OrderBoMap">
      <include refid="selectOrder" />
      <include refid="fromOrder" />
      where `order`.customer_id = #{customerId}
      <if test="page.status != null and page.status != ''">
            and `order`.status=#{page.status} 
      </if> 
      <if test="page.processStatus != null and page.processStatus != ''">
            and `order`.process_status=#{page.processStatus} 
      </if>      
      order by `order`.created_at desc
      limit #{page.start},#{page.count}
    </select>
    
</mapper>